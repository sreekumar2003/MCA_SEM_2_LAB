import javax.swing.*;

import java.awt.*;

import java.awt.event.*;

import java.util.*;

import java.text.SimpleDateFormat;

import javax.sound.sampled.AudioInputStream;

import javax.sound.sampled.AudioSystem;

import javax.sound.sampled.Clip;

import javax.sound.sampled.LineUnavailableException;

import javax.sound.sampled.UnsupportedAudioFileException;

import java.io.File;

import java.io.IOException;

public class AlarmClockApp { private JFrame frame;  private JTabbedPane tabbedPane;    // Clock components  private JLabel clockLabel;  private java.util.Timer clockTimer;    // Alarm components  private DefaultListModel<String> alarmListModel;  private JList<String> alarmList;  private ArrayList<String> alarms;  private java.util.Timer alarmCheckTimer;  private JButton setAlarmButton, deleteAlarmButton;  private Clip alarmClip;  private JDialog alarmDialog;    // Stopwatch components  private JLabel stopwatchLabel;  private JTextArea lapTimes;  private JButton startStopwatchButton, pauseStopwatchButton, resetStopwatchButton, lapButton;  private java.util.Timer stopwatchTimer;  private int stopwatchSeconds = 0;  private boolean stopwatchRunning = false;    // Timer components  private JLabel timerLabel;  private JButton startTimerButton, stopTimerButton, setTimerButton;  private java.util.Timer countdownTimer;  private int countdownSeconds = 60;  private boolean timerRunning = false;  private Clip timerClip;  private JDialog timerDialog;    private Color currentBgColor = new Color(40, 40, 40);    public AlarmClockApp() {      try {          UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");      } catch (Exception e) {          e.printStackTrace();      }            initializeUI();      startClock();      startAlarmCheckTimer();      frame.setVisible(true);  }    private void initializeUI() {      frame = new JFrame("Alarm Clock, Stopwatch & Timer");      frame.setSize(600, 500);      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);      frame.setLayout(new BorderLayout());      frame.setResizable(true);      frame.getContentPane().setBackground(currentBgColor);            tabbedPane = new JTabbedPane();      tabbedPane.setBackground(currentBgColor);      tabbedPane.setForeground(Color.WHITE);            createClockTab();      createAlarmTab();      createStopwatchTab();      createTimerTab();            frame.add(tabbedPane, BorderLayout.CENTER);  }    private void createClockTab() {      JPanel clockPanel = new JPanel(new BorderLayout());      clockPanel.setBackground(currentBgColor);      clockPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));            clockLabel = new JLabel("00:00:00", SwingConstants.CENTER);      clockLabel.setFont(new Font("Arial", Font.BOLD, 50));      clockLabel.setForeground(Color.WHITE);            clockPanel.add(clockLabel, BorderLayout.CENTER);      tabbedPane.addTab("Clock", null, clockPanel, "Current Time");  }    private void createAlarmTab() {      JPanel alarmPanel = new JPanel(new BorderLayout());      alarmPanel.setBackground(currentBgColor);      alarmPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));            alarms = new ArrayList<>();      alarmListModel = new DefaultListModel<>();      alarmList = new JList<>(alarmListModel);      alarmList.setBackground(new Color(60, 60, 60));      alarmList.setForeground(Color.WHITE);      alarmList.setSelectionBackground(new Color(70, 130, 180));      JScrollPane alarmScrollPane = new JScrollPane(alarmList);            JPanel alarmButtonPanel = new JPanel(new GridLayout(1, 2, 10, 10));      alarmButtonPanel.setBackground(currentBgColor);            setAlarmButton = createStyledButton("Set Alarm");      deleteAlarmButton = createStyledButton("Delete Alarm");            setAlarmButton.addActionListener(e -> setAlarm());      deleteAlarmButton.addActionListener(e -> deleteAlarm());            alarmButtonPanel.add(setAlarmButton);      alarmButtonPanel.add(deleteAlarmButton);            alarmPanel.add(alarmScrollPane, BorderLayout.CENTER);      alarmPanel.add(alarmButtonPanel, BorderLayout.SOUTH);            tabbedPane.addTab("Alarm", null, alarmPanel, "Set and manage alarms");  }    private void createStopwatchTab() {      JPanel stopwatchPanel = new JPanel(new BorderLayout());      stopwatchPanel.setBackground(currentBgColor);      stopwatchPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));            stopwatchLabel = new JLabel("Stopwatch: 00:00", SwingConstants.CENTER);      stopwatchLabel.setFont(new Font("Arial", Font.BOLD, 30));      stopwatchLabel.setForeground(Color.CYAN);            lapTimes = new JTextArea();      lapTimes.setEditable(false);      lapTimes.setBackground(currentBgColor);      lapTimes.setForeground(Color.WHITE);      lapTimes.setFont(new Font("Arial", Font.PLAIN, 14));      JScrollPane lapScrollPane = new JScrollPane(lapTimes);            JPanel stopwatchButtonPanel = new JPanel(new GridLayout(1, 4, 10, 10));      stopwatchButtonPanel.setBackground(currentBgColor);            startStopwatchButton = createStyledButton("Start");      pauseStopwatchButton = createStyledButton("Pause");      resetStopwatchButton = createStyledButton("Reset");      lapButton = createStyledButton("Lap");            startStopwatchButton.addActionListener(e -> startStopwatch());      pauseStopwatchButton.addActionListener(e -> pauseStopwatch());      resetStopwatchButton.addActionListener(e -> resetStopwatch());      lapButton.addActionListener(e -> recordLap());            stopwatchButtonPanel.add(startStopwatchButton);      stopwatchButtonPanel.add(pauseStopwatchButton);      stopwatchButtonPanel.add(resetStopwatchButton);      stopwatchButtonPanel.add(lapButton);            stopwatchPanel.add(stopwatchLabel, BorderLayout.NORTH);      stopwatchPanel.add(lapScrollPane, BorderLayout.CENTER);      stopwatchPanel.add(stopwatchButtonPanel, BorderLayout.SOUTH);            tabbedPane.addTab("Stopwatch", null, stopwatchPanel, "Stopwatch with lap times");  }    private void createTimerTab() {      JPanel timerPanel = new JPanel(new BorderLayout());      timerPanel.setBackground(currentBgColor);      timerPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));            timerLabel = new JLabel("Timer: 01:00", SwingConstants.CENTER);      timerLabel.setFont(new Font("Arial", Font.BOLD, 30));      timerLabel.setForeground(Color.ORANGE);            JPanel timerButtonPanel = new JPanel(new GridLayout(1, 3, 10, 10));      timerButtonPanel.setBackground(currentBgColor);            startTimerButton = createStyledButton("Start");      stopTimerButton = createStyledButton("Stop");      setTimerButton = createStyledButton("Set Timer");            startTimerButton.addActionListener(e -> startCountdownTimer());      stopTimerButton.addActionListener(e -> stopCountdownTimer());      setTimerButton.addActionListener(e -> setTimer());            timerButtonPanel.add(startTimerButton);      timerButtonPanel.add(stopTimerButton);      timerButtonPanel.add(setTimerButton);            timerPanel.add(timerLabel, BorderLayout.CENTER);      timerPanel.add(timerButtonPanel, BorderLayout.SOUTH);            tabbedPane.addTab("Timer", null, timerPanel, "Countdown timer");  }    private JButton createStyledButton(String text) {      JButton button = new JButton(text);      button.setFont(new Font("Arial", Font.BOLD, 14));      button.setBackground(new Color(70, 130, 180));      button.setForeground(Color.WHITE);      button.setFocusPainted(false);      button.setBorderPainted(false);      button.setOpaque(true);      button.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));      return button;  }    private void startClock() {      clockTimer = new java.util.Timer();      clockTimer.scheduleAtFixedRate(new TimerTask() {          @Override          public void run() {              SimpleDateFormat formatter = new SimpleDateFormat("HH:mm:ss");              SwingUtilities.invokeLater(() -> clockLabel.setText(formatter.format(new Date())));          }      }, 0, 1000);  }    private void startStopwatch() {      if (!stopwatchRunning) {          stopwatchRunning = true;          stopwatchTimer = new java.util.Timer();          stopwatchTimer.scheduleAtFixedRate(new TimerTask() {              @Override              public void run() {                  stopwatchSeconds++;                  int minutes = stopwatchSeconds / 60;                  int seconds = stopwatchSeconds % 60;                  SwingUtilities.invokeLater(() ->                       stopwatchLabel.setText(String.format("Stopwatch: %02d:%02d", minutes, seconds)));              }          }, 1000, 1000);      }  }    private void pauseStopwatch() {      if (stopwatchRunning) {          stopwatchRunning = false;          if (stopwatchTimer != null) {              stopwatchTimer.cancel();          }      }  }    private void resetStopwatch() {      stopwatchRunning = false;      if (stopwatchTimer != null) {          stopwatchTimer.cancel();      }      stopwatchSeconds = 0;      stopwatchLabel.setText("Stopwatch: 00:00");      lapTimes.setText("");  }    private void recordLap() {      int minutes = stopwatchSeconds / 60;      int seconds = stopwatchSeconds % 60;      lapTimes.append("Lap " + (lapTimes.getLineCount() + 1) + ": " +                      String.format("%02d:%02d", minutes, seconds) + "\n");  }    private void setAlarm() {      String input = JOptionPane.showInputDialog("Set alarm (HH:mm):");      if (input != null && !input.isEmpty()) {          if (input.matches("^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$")) {              alarms.add(input);              alarmListModel.addElement(input);          } else {              JOptionPane.showMessageDialog(frame,                   "Invalid time format. Please use HH:mm (24-hour format)");          }      }  }    private void deleteAlarm() {      int selectedIndex = alarmList.getSelectedIndex();      if (selectedIndex != -1) {          alarmListModel.remove(selectedIndex);          alarms.remove(selectedIndex);      }  }    private void startCountdownTimer() {      if (!timerRunning) {          String input = JOptionPane.showInputDialog("Set timer in seconds:");          try {              if (input != null && !input.isEmpty()) {                  countdownSeconds = Integer.parseInt(input);                  timerLabel.setText(String.format("Timer: %02d:%02d",                       countdownSeconds / 60, countdownSeconds % 60));                  timerRunning = true;                  countdownTimer = new java.util.Timer();                  countdownTimer.scheduleAtFixedRate(new TimerTask() {                      @Override                      public void run() {                          if (countdownSeconds > 0) {                              countdownSeconds--;                              int minutes = countdownSeconds / 60;                              int seconds = countdownSeconds % 60;                              SwingUtilities.invokeLater(() ->                                   timerLabel.setText(String.format("Timer: %02d:%02d", minutes, seconds)));                          } else {                              countdownTimer.cancel();                              timerRunning = false;                              SwingUtilities.invokeLater(() -> {                                  tabbedPane.setSelectedIndex(3);                                  showTimerCompleteDialog();                              });                          }                      }                  }, 1000, 1000);              }          } catch (NumberFormatException e) {              JOptionPane.showMessageDialog(frame, "Invalid input. Please enter a number.");          }      }  }    private void showTimerCompleteDialog() {      timerDialog = new JDialog(frame, "Timer Complete", true);      timerDialog.setLayout(new BorderLayout());      timerDialog.setSize(300, 150);      timerDialog.setLocationRelativeTo(frame);            JLabel timerMessage = new JLabel("Time's up!", SwingConstants.CENTER);      timerMessage.setFont(new Font("Arial", Font.BOLD, 18));            JButton stopButton = new JButton("Stop Timer");      stopButton.addActionListener(e -> {          stopTimerSound();          timerDialog.dispose();      });            timerDialog.add(timerMessage, BorderLayout.CENTER);      timerDialog.add(stopButton, BorderLayout.SOUTH);            playTimerSound();      timerDialog.setVisible(true);  }    private void stopCountdownTimer() {      if (timerRunning && countdownTimer != null) {          countdownTimer.cancel();          timerRunning = false;      }  }    private void setTimer() {      String input = JOptionPane.showInputDialog("Set timer in seconds:");      try {          if (input != null && !input.isEmpty()) {              countdownSeconds = Integer.parseInt(input);              timerLabel.setText(String.format("Timer: %02d:%02d",                   countdownSeconds / 60, countdownSeconds % 60));          }      } catch (NumberFormatException e) {          JOptionPane.showMessageDialog(frame, "Invalid input. Please enter a number.");      }  }    private void playAlarmSound() {      try {          AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(              new File("alarm.wav").getAbsoluteFile());          alarmClip = AudioSystem.getClip();          alarmClip.open(audioInputStream);          alarmClip.loop(Clip.LOOP_CONTINUOUSLY);          alarmClip.start();      } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {          JOptionPane.showMessageDialog(frame, "Error playing alarm sound: " + e.getMessage());      }  }    private void stopAlarmSound() {      if (alarmClip != null) {          alarmClip.stop();          alarmClip.close();      }  }    private void playTimerSound() {      try {          AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(              new File("alarm.wav").getAbsoluteFile());          timerClip = AudioSystem.getClip();          timerClip.open(audioInputStream);          timerClip.loop(Clip.LOOP_CONTINUOUSLY);          timerClip.start();      } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {          JOptionPane.showMessageDialog(frame, "Error playing timer sound: " + e.getMessage());      }  }    private void stopTimerSound() {      if (timerClip != null) {          timerClip.stop();          timerClip.close();      }  }    private void startAlarmCheckTimer() {      alarmCheckTimer = new java.util.Timer();      alarmCheckTimer.scheduleAtFixedRate(new TimerTask() {          @Override          public void run() {              checkAlarms();          }      }, 0, 1000);  }    private void checkAlarms() {      SimpleDateFormat formatter = new SimpleDateFormat("HH:mm");      String currentTime = formatter.format(new Date());            for (int i = 0; i < alarms.size(); i++) {          String alarm = alarms.get(i);          if (currentTime.equals(alarm)) {              SwingUtilities.invokeLater(() -> {                  tabbedPane.setSelectedIndex(1);                  showAlarmDialog(alarm);              });                            alarms.remove(i);              alarmListModel.removeElement(alarm);              i--;              break;          }      }  }    private void showAlarmDialog(String alarmTime) {      alarmDialog = new JDialog(frame, "Alarm", true);      alarmDialog.setLayout(new BorderLayout());      alarmDialog.setSize(300, 150);      alarmDialog.setLocationRelativeTo(frame);            JLabel alarmMessage = new JLabel("Alarm: " + alarmTime + "!", SwingConstants.CENTER);      alarmMessage.setFont(new Font("Arial", Font.BOLD, 18));            JButton stopButton = new JButton("Stop Alarm");      stopButton.addActionListener(e -> {          stopAlarmSound();          alarmDialog.dispose();      });            alarmDialog.add(alarmMessage, BorderLayout.CENTER);      alarmDialog.add(stopButton, BorderLayout.SOUTH);            playAlarmSound();      alarmDialog.setVisible(true);  }    public static void main(String[] args) {      SwingUtilities.invokeLater(() -> {          try {              new AlarmClockApp();          } catch (Exception e) {              e.printStackTrace();              JOptionPane.showMessageDialog(null,                   "Error starting application: " + e.getMessage(),                   "Error", JOptionPane.ERROR_MESSAGE);          }      });  }  }

